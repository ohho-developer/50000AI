# Generated by Django 5.2.7 on 2025-10-05 03:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='음식명', max_length=200)),
                ('name_english', models.CharField(blank=True, help_text='영문 음식명', max_length=200)),
                ('calories', models.FloatField(help_text='칼로리 (kcal)')),
                ('protein', models.FloatField(help_text='단백질 (g)')),
                ('carbs', models.FloatField(help_text='탄수화물 (g)')),
                ('fat', models.FloatField(help_text='지방 (g)')),
                ('fiber', models.FloatField(default=0, help_text='식이섬유 (g)')),
                ('sugar', models.FloatField(default=0, help_text='당분 (g)')),
                ('sodium', models.FloatField(default=0, help_text='나트륨 (mg)')),
                ('potassium', models.FloatField(default=0, help_text='칼륨 (mg)')),
                ('calcium', models.FloatField(default=0, help_text='칼슘 (mg)')),
                ('iron', models.FloatField(default=0, help_text='철분 (mg)')),
                ('vitamin_a', models.FloatField(default=0, help_text='비타민 A (μg)')),
                ('vitamin_c', models.FloatField(default=0, help_text='비타민 C (mg)')),
                ('vitamin_d', models.FloatField(default=0, help_text='비타민 D (μg)')),
                ('category', models.CharField(blank=True, help_text='음식 카테고리', max_length=100)),
                ('subcategory', models.CharField(blank=True, help_text='음식 하위 카테고리', max_length=100)),
                ('food_code', models.CharField(blank=True, help_text='식약처 음식 코드', max_length=50)),
                ('source', models.CharField(default='식품의약품안전처', help_text='데이터 출처', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='nutrients_c_name_48e5c4_idx'), models.Index(fields=['category'], name='nutrients_c_categor_953789_idx')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', '남성'), ('female', '여성')], default='male', max_length=10)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('height', models.FloatField(help_text='키 (cm)', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)])),
                ('weight', models.FloatField(help_text='체중 (kg)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)])),
                ('goal', models.CharField(choices=[('lose_weight', '체중 감량'), ('maintain_weight', '체중 유지'), ('gain_weight', '체중 증가'), ('muscle_gain', '근육 증가')], default='maintain_weight', max_length=20)),
                ('activity_level', models.CharField(choices=[('sedentary', '거의 활동 없음'), ('light', '가벼운 활동'), ('moderate', '보통 활동'), ('active', '활동적'), ('very_active', '매우 활동적')], default='moderate', max_length=20)),
                ('daily_calories', models.IntegerField(default=2000, help_text='일일 권장 칼로리')),
                ('daily_protein', models.FloatField(default=150, help_text='일일 권장 단백질 (g)')),
                ('daily_carbs', models.FloatField(default=250, help_text='일일 권장 탄수화물 (g)')),
                ('daily_fat', models.FloatField(default=67, help_text='일일 권장 지방 (g)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DailyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateField(help_text='리포트 날짜')),
                ('title', models.CharField(help_text='리포트 제목', max_length=200)),
                ('summary', models.TextField(help_text='일일 요약')),
                ('analysis', models.TextField(help_text='영양소 분석')),
                ('recommendations', models.TextField(help_text='개선 권장사항')),
                ('encouragement', models.TextField(help_text='격려 메시지')),
                ('total_calories', models.FloatField(default=0, help_text='총 섭취 칼로리')),
                ('total_protein', models.FloatField(default=0, help_text='총 섭취 단백질 (g)')),
                ('total_carbs', models.FloatField(default=0, help_text='총 섭취 탄수화물 (g)')),
                ('total_fat', models.FloatField(default=0, help_text='총 섭취 지방 (g)')),
                ('calorie_achievement', models.FloatField(default=0, help_text='칼로리 목표 달성률 (%)')),
                ('protein_achievement', models.FloatField(default=0, help_text='단백질 목표 달성률 (%)')),
                ('carbs_achievement', models.FloatField(default=0, help_text='탄수화물 목표 달성률 (%)')),
                ('fat_achievement', models.FloatField(default=0, help_text='지방 목표 달성률 (%)')),
                ('ai_model', models.CharField(default='gemini-pro', help_text='사용된 AI 모델', max_length=100)),
                ('analysis_timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-report_date'],
                'indexes': [models.Index(fields=['user', 'report_date'], name='nutrients_c_user_id_ba64a0_idx')],
                'unique_together': {('user', 'report_date')},
            },
        ),
        migrations.CreateModel(
            name='FoodLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(help_text='섭취량 (g)')),
                ('meal_type', models.CharField(choices=[('breakfast', '아침'), ('lunch', '점심'), ('dinner', '저녁'), ('snack', '간식')], default='lunch', max_length=20)),
                ('original_text', models.TextField(help_text='사용자가 입력한 원본 텍스트')),
                ('ai_analysis', models.JSONField(default=dict, help_text='AI 분석 결과')),
                ('consumed_at', models.DateTimeField(auto_now_add=True)),
                ('consumed_date', models.DateField(auto_now_add=True)),
                ('total_calories', models.FloatField(help_text='총 칼로리')),
                ('total_protein', models.FloatField(help_text='총 단백질 (g)')),
                ('total_carbs', models.FloatField(help_text='총 탄수화물 (g)')),
                ('total_fat', models.FloatField(help_text='총 지방 (g)')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_logs', to='nutrients_codi.food')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-consumed_at'],
                'indexes': [models.Index(fields=['user', 'consumed_date'], name='nutrients_c_user_id_2cc92c_idx'), models.Index(fields=['consumed_date'], name='nutrients_c_consume_b3cf7b_idx')],
            },
        ),
    ]
